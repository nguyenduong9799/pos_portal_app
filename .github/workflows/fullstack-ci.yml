name: Full Stack CI/CD with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Frontend job
  frontend:
    runs-on: self-hosted
    
    defaults:
      run:
        working-directory: frontend
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build
      
    - name: Test frontend
      run: npm test -- --watch=false --browsers=ChromeHeadless
      continue-on-error: true
      
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 1

  # Backend job
  backend:
    runs-on: self-hosted
    
    defaults:
      run:
        working-directory: backend
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint backend
      run: npm run lint
      continue-on-error: true
      
    - name: Build backend
      run: npm run build
      
    - name: Test backend
      run: npm test
      continue-on-error: true
      
    - name: Upload backend build
      uses: actions/upload-artifact@v4
      with:
        name: backend-dist
        path: backend/dist/
        retention-days: 1

  # Docker build and deploy job
  deploy:
    runs-on: self-hosted
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./frontend/dist/
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-dist
        path: ./backend/dist/
        
    - name: Verify build artifacts
      run: |
        echo "📁 Checking build artifacts"
        echo "Frontend dist contents:"
        ls -la ./frontend/dist/ || echo "Frontend dist not found"
        echo "Backend dist contents:"
        ls -la ./backend/dist/ || echo "Backend dist not found"
        
    - name: Set up Docker environment
      run: |
        echo "🐳 Setting up Docker environment"
        docker --version
        docker compose --version || docker compose version
        
    - name: Stop existing containers
      run: |
        echo "🛑 Stopping existing containers"
        docker compose down --remove-orphans || docker compose down --remove-orphans || true
        
    - name: Clean up old images
      run: |
        echo "🧹 Cleaning up old images"
        docker image prune -f
        # Remove old pos-portal images
        docker images | grep pos-portal | awk '{print $3}' | xargs -r docker rmi -f || true
        
    - name: Build Docker images
      run: |
        echo "🔨 Building Docker images"
        echo "Current directory: $(pwd)"
        echo "Docker Compose file exists: $(test -f docker-compose.yml && echo 'Yes' || echo 'No')"
        echo "Backend Dockerfile exists: $(test -f backend/Dockerfile && echo 'Yes' || echo 'No')"
        echo "Frontend Dockerfile exists: $(test -f frontend/Dockerfile && echo 'Yes' || echo 'No')"
        
        # Build with verbose output for debugging
        docker compose build --no-cache --progress=plain
        
    - name: Start services
      run: |
        echo "🚀 Starting services"
        docker compose up -d
        
    - name: Wait for services to be ready
      run: |
        echo "⏳ Waiting for services to start..."
        sleep 45
        
        echo "🔍 Checking service health"
        
        # Check backend health
        for i in {1..12}; do
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "✅ Backend is healthy"
            backend_ready=true
            break
          else
            echo "⏳ Backend not ready, attempt $i/12"
            sleep 10
          fi
        done
        
        # Check frontend
        for i in {1..6}; do
          if curl -f http://localhost:4200 2>/dev/null; then
            echo "✅ Frontend is accessible"
            frontend_ready=true
            break
          else
            echo "⏳ Frontend not ready, attempt $i/6"
            sleep 5
          fi
        done
        
        # Show container logs if services aren't ready
        if [[ ! $backend_ready ]]; then
          echo "❌ Backend failed to start. Container logs:"
          docker logs pos-portal-backend
        fi
        
        if [[ ! $frontend_ready ]]; then
          echo "❌ Frontend failed to start. Container logs:"
          docker logs pos-portal-frontend
        fi
        
    - name: Display deployment status
      run: |
        echo "� Deployment Status:"
        echo "===================="
        docker compose ps || docker compose ps
        
        echo ""
        echo "📋 Container Details:"
        echo "===================="
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
        
        echo ""
        echo "💾 Image Sizes:"
        echo "==============="
        docker images | grep pos-portal
        
        echo ""
        echo "🌐 Service URLs:"
        echo "==============="
        echo "Frontend: http://localhost:4200"
        echo "Backend:  http://localhost:3000"
        
    - name: Run deployment tests
      run: |
        echo "🧪 Running deployment tests"
        
        # Test backend API
        if curl -f http://localhost:3000/health 2>/dev/null; then
          echo "✅ Backend API is responding"
        else
          echo "❌ Backend API test failed"
          echo "Backend logs:"
          docker logs pos-portal-backend --tail 50
          exit 1
        fi
        
        # Test frontend
        if curl -f http://localhost:4200 2>/dev/null; then
          echo "✅ Frontend is serving"
        else
          echo "❌ Frontend test failed"
          echo "Frontend logs:"
          docker logs pos-portal-frontend --tail 50
          exit 1
        fi
        
        # Test container health
        backend_health=$(docker inspect --format='{{.State.Health.Status}}' pos-portal-backend 2>/dev/null || echo "unknown")
        frontend_health=$(docker inspect --format='{{.State.Health.Status}}' pos-portal-frontend 2>/dev/null || echo "unknown")
        
        echo "Backend health: $backend_health"
        echo "Frontend health: $frontend_health"
        
    - name: Deploy notification
      run: |
        echo "🎉 Deployment Successful!"
        echo "========================"
        echo "Frontend: Running on port 4200"
        echo "Backend:  Running on port 3000"
        echo "Docker containers are healthy and running"
        echo ""
        echo "Container status:"
        docker compose ps || docker compose ps