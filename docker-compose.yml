version: '3.8'

services:
  # PostgreSQL Database service
  postgres:
    image: postgres:15-alpine
    container_name: pos-portal-postgres
    environment:
      - POSTGRES_DB=pos_system
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=zaQ@1234
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - pos-portal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    image: pos-portal-backend:latest
    container_name: pos-portal-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=zaQ@1234
      - DB_DATABASE=pos_system
    env_file:
      - ./backend/.env.production
    networks:
      - pos-portal-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - backend-logs:/app/logs

  # Frontend service
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    image: pos-portal-frontend:latest
    container_name: pos-portal-frontend
    ports:
      - "4200:4200"
    networks:
      - pos-portal-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4200"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  pos-portal-network:
    driver: bridge
    name: pos-portal-network

volumes:
  postgres-data:
    driver: local
  backend-logs:
    driver: local
